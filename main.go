// Ortelius v11 Domain Microservice that handles creating and retrieving Domains
package main

import (
	"archive/zip"
	"context"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"

	_ "cli/docs"

	driver "github.com/arangodb/go-driver/v2/arangodb"
	"github.com/arangodb/go-driver/v2/arangodb/shared"
	mapset "github.com/deckarep/golang-set/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"github.com/ortelius/scec-commons/database"
	"github.com/ortelius/scec-commons/model"
)

type vulnID struct {
	ID       string `json:"id"`
	Modified string `json:"modified"`
}

var logger = database.InitLogger()
var dbconn = database.InitializeDB("vulns")

// unpackAndLoad
func unpackAndLoad(src string, currentVulns mapset.Set[string]) error {

	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer func() {
		if err := r.Close(); err != nil {
			panic(err)
		}
	}()

	// Closure to address file descriptors issue with all the deferred .Close() methods
	extractAndWriteFile := func(f *zip.File) error {

		// Check for ZipSlip: https://snyk.io/research/zip-slip-vulnerability
		if strings.Contains(f.Name, "/") {
			return fmt.Errorf("%s: illegal file path", f.Name)
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}
		defer func() {
			if err := rc.Close(); err != nil {
				panic(err)
			}
		}()

		if !f.FileInfo().IsDir() {
			var vulnJSON strings.Builder

			_, err = io.Copy(&vulnJSON, rc)
			if err != nil {
				return err
			}

			var vulnIDMod vulnID
			if err := json.Unmarshal([]byte(vulnJSON.String()), &vulnIDMod); err == nil {
				logger.Sugar().Infoln(err)
			}

			key := vulnIDMod.ID + vulnIDMod.Modified
			if currentVulns.Contains(key) {
				return nil
			}

			logger.Sugar().Infof("%s %s", vulnIDMod.ID, vulnIDMod.Modified)
			// Add json to db
			if err := newVuln(vulnJSON.String()); err != nil {
				logger.Sugar().Infoln(err)
			}
			currentVulns.Add(key)
		}
		return nil
	}

	for _, f := range r.File {
		err := extractAndWriteFile(f)
		if err != nil {
			return err
		}
	}

	return nil
}

// LoadFromOSVDev retrieves the vulns from osv.dev and adds them to the Arangodb
func LoadFromOSVDev() {

	for {

		if currentVulns, err := getVulns(); err == nil {

			baseURL := "https://www.googleapis.com/download/storage/v1/b/osv-vulnerabilities/o/ecosystems.txt?alt=media"

			client := http.Client{}

			resp, err := client.Get(baseURL)
			if err != nil {
				logger.Sugar().Fatal(err)
			}

			// We Read the response body on the line below.
			body, err := io.ReadAll(resp.Body)
			if err != nil {
				logger.Sugar().Fatalln(err)
			}
			resp.Body.Close()

			// Convert the body to type string
			ecosystems := strings.Split(string(body), "\n")

			for _, platform := range ecosystems {
				if len(strings.TrimSpace(platform)) == 0 {
					continue
				}

				tr := &http.Transport{
					TLSClientConfig: &tls.Config{
						InsecureSkipVerify: false,
					},
				}
				client := &http.Client{Transport: tr}

				url := fmt.Sprintf("https://www.googleapis.com/download/storage/v1/b/osv-vulnerabilities/o/%s%%2Fall.zip?alt=media", platform)
				logger.Sugar().Infof("%s", url)
				if resp, err := client.Get(url); err == nil {
					filename := fmt.Sprintf("%s.zip", platform)
					if out, err := os.Create(filename); err != nil {
						if _, err := io.Copy(out, resp.Body); err != nil {
							logger.Sugar().Infoln(err)
						}
						out.Close()
					} else {
						logger.Sugar().Infoln(err)
					}

					if err := unpackAndLoad(filename, currentVulns); err != nil {
						logger.Sugar().Infoln(err)
					}
					os.Remove(filename)
					resp.Body.Close()
				} else {
					logger.Sugar().Infoln(err)
				}
			}
		} else {
			logger.Sugar().Fatalln(err)
		}
		time.Sleep(30 * time.Minute)
	}
}

// getVulns godoc
// @Summary Get a list of Vulns aleady in the database
// @Description Returns a Set of vuln ids
// @Tags vulns
// @Produce mapset.Set[string]
func getVulns() (mapset.Set[string], error) {

	var cursor driver.Cursor       // db cursor for rows
	var err error                  // for error handling
	var ctx = context.Background() // use default database context

	currentVulns := mapset.NewSet[string]()

	// query all the domains in the collection
	aql := `FOR vuln in vulns
			RETURN {id: vuln._key, modified: vuln.modified}`

	// execute the query with no parameters
	if cursor, err = dbconn.Database.Query(ctx, aql, nil); err != nil {
		logger.Sugar().Errorf("Failed to run query: %v", err) // log error
		return currentVulns, err
	}

	defer cursor.Close() // close the cursor when returning from this function

	for cursor.HasMore() { // loop thru all of the documents

		var vulnIDMod vulnID

		// fetch a document from the cursor
		if _, err = cursor.ReadDocument(ctx, &vulnIDMod); err != nil {
			logger.Sugar().Errorf("Failed to read document: %v", err)
			return currentVulns, err
		}
		key := vulnIDMod.ID + vulnIDMod.Modified
		currentVulns.Add(key)
	}

	return currentVulns, nil
}

// NewDomain godoc
// @Summary Create a Domain
// @Description Create a new Domain and persist it
// @Tags domain
// @Accept application/json
// @Produce json
// @Success 200
// @Router /msapi/domain [post]
func newVuln(vulnJSON string) error {

	var err error                  // for error handling
	var ctx = context.Background() // use default database context

	// Unmarshal the raw message into a value of the desired type (map[string]interface{} in this case).
	var content map[string]interface{}

	if err := json.Unmarshal([]byte(strings.Replace(vulnJSON, "\"id\":", "\"_key\":", 1)), &content); err != nil {
		logger.Sugar().Infoln(err)
	}

	var documents []map[string]interface{}

	documents = append(documents, content)

	overwriteMode := driver.CollectionDocumentCreateOverwriteModeConflict
	options := &driver.CollectionDocumentCreateOptions{
		OverwriteMode: overwriteMode.New(),
	}

	// update existing docs and add if missing
	if _, err = dbconn.Collection.CreateDocumentWithOptions(ctx, documents, options); err != nil {
		logger.Sugar().Errorf("Failed to create document: %v", err)
	}

	return nil
}

// GetDomains godoc
// @Summary Get a List of Domains
// @Description Get a list of domains for the user.
// @Tags domain
// @Accept */*
// @Produce json
// @Success 200
// @Router /msapi/domain [get]
func GetDomains(c *fiber.Ctx) error {

	var cursor driver.Cursor       // db cursor for rows
	var err error                  // for error handling
	var ctx = context.Background() // use default database context

	// query all the domains in the collection
	aql := `FOR domain in evidence
			RETURN domain`

	// execute the query with no parameters
	if cursor, err = dbconn.Database.Query(ctx, aql, nil); err != nil {
		logger.Sugar().Errorf("Failed to run query: %v", err) // log error
	}

	defer cursor.Close() // close the cursor when returning from this function

	var domains []model.Domain // define a list of domains to be returned

	for cursor.HasMore() { // loop thru all of the documents

		var domain model.Domain      // fetched domain
		var meta driver.DocumentMeta // data about the fetch

		// fetch a document from the cursor
		if meta, err = cursor.ReadDocument(ctx, &domain); err != nil {
			logger.Sugar().Errorf("Failed to read document: %v", err)
		}
		domains = append(domains, domain)                                    // add the domain to the list
		logger.Sugar().Infof("Got doc with key '%s' from query\n", meta.Key) // log the key
	}

	return c.JSON(domains) // return the list of domains in JSON format
}

// GetDomain godoc
// @Summary Get a Domain
// @Description Get a domain based on the _key or name.
// @Tags domain
// @Accept */*
// @Produce json
// @Success 200
// @Router /msapi/domain/:key [get]
func GetDomain(c *fiber.Ctx) error {

	var cursor driver.Cursor       // db cursor for rows
	var err error                  // for error handling
	var ctx = context.Background() // use default database context

	key := c.Params("key")                // key from URL
	parameters := map[string]interface{}{ // parameters
		"key": key,
	}

	// query the domains that match the key or name
	aql := `FOR domain in books
			FILTER (domain.name == @key or domain._key == @key)
			RETURN domain`

	// run the query with patameters
	if cursor, err = dbconn.Database.Query(ctx, aql, &driver.QueryOptions{BindVars: parameters}); err != nil {
		logger.Sugar().Errorf("Failed to run query: %v", err)
	}

	defer cursor.Close() // close the cursor when returning from this function

	var domain model.Domain // define a domain to be returned

	if cursor.HasMore() { // domain found
		var meta driver.DocumentMeta // data about the fetch

		if meta, err = cursor.ReadDocument(ctx, &domain); err != nil {
			logger.Sugar().Errorf("Failed to read document: %v", err)
		}
		logger.Sugar().Infof("Got doc with key '%s' from query\n", meta.Key)

	} else { // not found so get from NFT Storage
		if jsonStr, exists := database.MakeJSON(key); exists {
			if err := json.Unmarshal([]byte(jsonStr), &domain); err != nil { // convert the JSON string from LTF into the object
				logger.Sugar().Errorf("Failed to unmarshal from LTS: %v", err)
			}
		}
	}

	return c.JSON(domain) // return the domain in JSON format
}

// NewDomain godoc
// @Summary Create a Domain
// @Description Create a new Domain and persist it
// @Tags domain
// @Accept application/json
// @Produce json
// @Success 200
// @Router /msapi/domain [post]
func NewDomain(c *fiber.Ctx) error {

	var err error                  // for error handling
	var meta driver.DocumentMeta   // data about the document
	var ctx = context.Background() // use default database context
	domain := new(model.Domain)    // define a domain to be returned

	if err = c.BodyParser(domain); err != nil { // parse the JSON into the domain object
		return c.Status(503).Send([]byte(err.Error()))
	}

	cid, dbStr := database.MakeNFT(&domain) // normalize the object into NFTs and JSON string for db persistence

	logger.Sugar().Infof("%s=%s\n", cid, dbStr) // log the new nft

	var resp driver.CollectionDocumentCreateResponse
	// add the domain to the database.  Ignore if it already exists since it will be identical
	if resp, err = dbconn.Collection.CreateDocument(ctx, domain); err != nil && !shared.IsConflict(err) {
		logger.Sugar().Errorf("Failed to create document: %v", err)
	}
	meta = resp.DocumentMeta
	logger.Sugar().Infof("Created document in collection '%s' in db '%s' key='%s'\n", dbconn.Collection.Name(), dbconn.Database.Name(), meta.Key)

	return c.JSON(domain) // return the domain object in JSON format.  This includes the new _key
}

// setupRoutes defines maps the routes to the functions
func setupRoutes(app *fiber.App) {

	app.Get("/swagger/*", swagger.HandlerDefault) // handle displaying the swagger
	app.Get("/msapi/domain", GetDomains)          // list of domains
	app.Get("/msapi/domain/:key", GetDomain)      // single domain based on name or key
	app.Post("/msapi/domain", NewDomain)          // save a single domain
}

// @title Ortelius v11 Domain Microservice
// @version 11.0.0
// @description RestAPI for the Domain Object
// @termsOfService http://swagger.io/terms/
// @contact.name Ortelius Google Group
// @contact.email ortelius-dev@googlegroups.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:3000
// @BasePath /msapi/domain
func main() {
	go LoadFromOSVDev()
	port := ":" + database.GetEnvDefault("MS_POST", "8080")
	app := fiber.New()                       // create a new fiber application
	setupRoutes(app)                         // define the routes for this microservice
	if err := app.Listen(port); err != nil { // start listening for incoming connections
		logger.Sugar().Fatalf("Failed get the microservice running: %v", err)
	}
}
